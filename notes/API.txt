String
-------
- String constructors
1. String() - The no-args constructor creates an empty String.
2. String(String str), String(StringBuilder sb) - Create a new String by copying the sequence of characters currently contained in the passed String or StringBuilder objects.
3. String(byte[] bytes) - Creates a new String by decoding the specified array of bytes using the platform's default charset.
4. String(char[] value)- Creates a new String so that it represents the sequence of characters currently contained in the character array argument.

- public String[] split​(String regex, int limit) 
It returns the String[] after splitting this string around matches of the given regex.
The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. 
If the limit is positive then the pattern will be applied at most (limit - 1) times
If the limit is zero or less than zero then the pattern will be applied as many times as possible.
Or in other words this split will return String array of max length limit if limit > 0.

- public String[] split​(String regex) {...}: It returns the String[] after splitting this string around matches of the given regular expression.
This method works as if by invoking the two-argument split method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. 
"BAZAAR".split("A"); returns ["B","Z","","R"] as this statement is equivalent to "BAZAAR".split("A", 0);.
":".split(":"); returns blank array as this statement is equivalent to ":".split(":", 0);.

- int indexOf(String str) method of String class returns the index within this string of the first occurrence of the specified substring or -1 if not found. e.g. "Java".indexOf("a") returns 1.

- int indexOf(int ch)- Returns the index within this string of the first occurrence of the specified character.  Returns -1 if the character is not found.

- char charAt​(int index) method of String class returns the char value at the specified index. e.g. "Java".charAt(2) returns 'v'. If index is >= length of String then StringIndexOutOfBoundException is thrown.

- isEmpty() method of String class returns true if and only if length() is 0.

- isBlank() method of String class (available since Java 11) returns true if the string is empty or contains only white space codepoints, otherwise false.


- String concat(String str) - Concatenates the specified string to the end of this string.
Example - System.out.println("1234".concat("abcd")); //prints 1234abcd

- int length() - Returns the length of this string.

- String substring(int beginIndex, int endIndex) - Returns a new string that is a substring of this string. beginIndex (inclusive), endIndex(exclusive). If endIndex is > length of String then StringIndexOutOfBoundException is thrown.

- String substring(int beginIndex) - This method works just like the other substring method except that it returns all the characters from beginIndex (i.e. including the character at the beginindex) to the end of the string (including the last character). If endBegin is > length of String then StringIndexOutOfBoundException is thrown.

- String toLowerCase()/toUpperCase() - Converts all of the characters in this String to lower/upper case. 
Example - System.out.println("ab".toUpperCase()); //prints AB

- String replace(char oldChar, char newChar) - Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar.
Example: System.out.println("ababa".replace('a', 'c')); //prints cbcbc

- String strip(), stripLeading(), stripTrailing(), trim() - Returns a copy of the string, with leading and/or trailing white space omitted.
Example:
System.out.println(" 123 ".strip()); //prints "123" (without the quotes)
System.out.println(" 123 ".stripLeading()); //prints "123 " (without the quotes)
System.out.println(" 123 ".stripTrailing()); //prints " 123" (without the quotes)
System.out.println(" 123 ".trim()); //prints "123" (without the quotes)

- One interesting thing about the String manipulation methods detailed above is that they return the same string if there is no change in the string as a result of the operation.

- boolean startsWith(String prefix): Returns true if this string starts with the specified prefix.

- boolean endsWith(String suffix): Returns true if this string ends with the specified suffix.

- boolean contains(CharSequence s): Returns true if and only if this string contains the specified sequence of char values.

- boolean equals(Object anObject): Returns true if the contents of this string and the passed string are exactly same. Observe that the type of the parameter is Object. That's because this method is actually defined in the Object class and the String class overrides this method. So, you can pass any object to this method, but if that object is not a string, it will return false.

- boolean equalsIgnoreCase(String anotherString): Compares this String to another String, ignoring case considerations.

- String.valueOf( ... ) is invoked to generate a string representation of the argument that is passed. For example, String.valueOf(123) returns the String "123"

- public String repeat​(int count) Returns a string whose value is the concatenation of this string repeated count times. If this string is empty or count is zero then the empty string is returned. Throws IllegalArgumentException - if the count is negative.

- public static String join(CharSequence delimiter, CharSequence... elements) {...}: It returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.
For example,
String.join(".", "A", "B", "C"); returns "A.B.C"
String.join("+", new String[]{"1", "2", "3"}); returns "1+2+3"
String.join("-", "HELLO"); returns "HELLO"

If delimiter is null or elements refer to null, then NullPointerException is thrown. e.g.,
String.join(null, "A", "B"); throws NullPointerException
String [] arr = null; String.join("-", arr); throws NullPointerException

But if single element is null, then "null" is considered. e.g.,
String str = null; String.join("-", str); returns "null"
String.join("::", new String[] {"James", null, "Gosling"}); returns "James::null::Gosling"

- public static String join​(CharSequence delimiter, Iterable<? extends CharSequence> elements) {...}: It returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.

For example,

String.join(".", List.of("A", "B", "C")); returns "A.B.C"

String.join(".", List.of("HELLO")); returns "HELLO"




StringBuilder
--------------
- StringBuilder Constructors
1. StringBuilder(): Constructs a StringBuilder with no characters in it and an initial capacity of 16 characters.
2. StringBuilder(CharSequence seq): Constructs a StringBuilder that contains the same characters as the specified CharSequence.
3. StringBuilder(int capacity): Constructs a StringBuilder with no characters in it and an initial capacity specified by the capacity argument. If you expect to build a large string, you can specify a big capacity at the beginning to avoid reallocation of the internal storage array later.
4. StringBuilder(String str): Constructs a StringBuilder initialized to the contents of the specified string. This constructor is actually redundant because of the StringBuilder(CharSequence seq) constructor. It exists only for backward compatibility with code written before JDK 1.4, which is when CharSequence was first introduced.

- public StringBuilder append(). Appends the string representation of the argument to the sequence. Returns reference to the StringBuilder object.

- public StringBuilder insert(int offset, variousDataTypes b). Inserts the string representation of the argument into this sequence. Returns reference to the StringBuilder object. If offset > length or offset < 0 then StringIndexOutOfBoundException is thrown.

- If you pass a variable pointing to null, the string "null" is appended to or inserted in the existing StringBuilder. No NullPointerException is thrown.

- For everything else, String.valueOf( ... ) is invoked to generate a string representation of the argument that is passed. For example, String.valueOf(123) returns the String "123", which is then appended to or inserted in the existing StringBuilder. In case of objects, valueOf invokes toString() on that object to get its string representation.

- public StringBuilder reverse() returns a StringBuilder object in reversed order and modifies original object

- public StringBuilder replace(int start,int end, String str) replaces StringBuilder object with str starting at start(inclusive) and ending at end(exclusive) and returns modified StringBuilder object. Throws StringIndexOutOfBoundsException - if start is negative, greater than length(), or greater than end.

- public StringBuilder delete(int start,int end). Removes the characters in a substring of this sequence. The substring begins at the specified start and extends to the character at index end - 1 or to the end of the sequence if no such character exists. If start is equal to end, no changes are made. Throws StringIndexOutOfBoundsException - if start is negative, greater than length(), or greater than end.

- public StringBuilder deleteCharAt(int index). Removes the char at the specified position in this sequence. This sequence is shortened by one char. Throws StringIndexOutOfBoundsException - if the index is negative or greater than or equal to length().

- StringBuilder object will always maintain an addition buffer of 16 chars whenever a string is appended to the object. For eg
StringBuilder sb = new StringBuilder(); // capacity is 16;
StringBuilder sb = new StringBuilder("Dhruv"); // capacity is 21

- Methods that cannot be chained are 
int capacity() 
char charAt(int index) 
int length() 
int indexOf(String str) 
int indexOf(String str, int startIndex) 
void setLength(int len) 
String substring(int start) 
String substring(int start, int end) 
String toString()

Array in Java
-------------
- Array.mismatch(array1, array2) return zero based index of arrays where mismatch is found. mismatch function is
overloaded and it takes primitive data types only. boolean, char, byte, short, int, float, double.

- There are other overloaded mismatch methods for primitive types with ranges:

int mismatch​(primitiveDataType[] a, int aFromIndex, int aToIndex, primitiveDataType[] b, int bFromIndex, int bToIndex)
These methods also compares the arrays, but over the specified range. 'From' index is inclusive but 'To' index is exclusive. Please note that returned index is relative.

Range version of mismatch methods throw below exceptions:
NullPointerException: if either array is null
IllegalArgumentException: if aFromIndex > aToIndex or if bFromIndex > bToIndex
ArrayIndexOutOfBoundsException: if aFromIndex < 0 or aToIndex > a.length or if bFromIndex < 0 or bToIndex > b.length

- Array.compare(Array1, Array2), if any array (Array1, Array2) is a proper prefix of each other then function returns
Array1.length - Array2.length. If Array1 is not sub set of Array2, then each element of arrays are compared with rules
of compare method of their respective primitive types.

- Array.equals(array) returns true if both array are equal false otherwise.

- public method named clone. This method creates a copy of the array object. Note that it doesn't create copies of the objects referred to by the array elements. It merely creates a new array object of the same length and copies the contents of existing array into the new array. Which means, if the existing array contained primitive values, those values will be copied to the elements of the new array. If the existing array contained references to objects, those references will be copied to the elements of the new array. Thus, the elements of the new array will also point to the same objects. This is also known as "shallow copy".

- public static <T> List<T> asList(T... a)
Returns a fixed-size list backed by the specified array. (Changes to the returned list "write through" to the array.) This method acts as bridge between array-based and collection-based APIs, in combination with Collection.toArray(). The returned list is serializable and implements RandomAccess.
This method also provides a convenient way to create a fixed-size list initialized to contain several elements:
     List<String> stooges = Arrays.asList("Larry", "Moe", "Curly");
It support non-structural changes to backed up Array. Any structural changes will cause UnsupportedOperationException to be thrown.
Parameters:
a - the array by which the list will be backed
Returns:
a list view of the specified array


Collection
----------
- add

- addAll

- remove

- removeAll

- removeIf (Predicate) method was added as a default method in Collection interface in JDK 8 and it removes all the elements of this collection that satisfy the given predicate.

- contains

- containsAll

- isEmpty

- clear


List Interface
--------------
- E get(int index): Returns the element at index. index should be > 0 and <= size -1, else IndexOutOfBoundException is thrown.

- E set(int index, E e): Replaces the existing element at index with the passed object and returns the original element that was replaced. index should be > 0 and <= size, else IndexOutOfBoundException is thrown.

- boolean add(E e): Adds an object at the end of the list. Returns true.

- void add(int index, E e): Adds an object at the specified index and shifts the existing elements at a higher index to the right. index should be > 0 and <= size, else IndexOutOfBoundException is thrown.

- boolean addAll(Collection<? extends E> c): Adds all the elements of the given collection to this list at the end. Returns true if this list changed as a result of the call.

- void addAll(int index, Collection<? extends E> c): Adds all the elements of the given collection at the given index. Returns true if this list changed as a result of the call. index should be > 0 and <= size, else IndexOutOfBoundException is thrown.

- E remove(int index): Removes an object from the specified index and shifts the existing elements at a higher index to the left. It returns the original element that was removed from the list. index should be > 0 and < size, else IndexOutOfBoundException is thrown.

- boolean remove(Object obj): Removes the first occurrence of given object from the list. Returns true if the object was found. The passed object is matched with the objects in the list using the equals method.

- boolean removeAll(Collection<?> c): Removes from this list all the elements that are present in the passed collection. Returns true if this list changed as a result of the call.

- boolean retainAll(Collection c): Removes from this list all the elements that are not in the passed collection. Returns true if this list changed as a result of the call.

- void clear(): Removes all the elements from this list.

- int size(): Returns the number of elements in this list.

- default void forEach(Consumer<? super T> action): Inherited from java.lang.Iterable. Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception. After experimenting it is observered that forEach use equal method to each object in list to do some processing. So if an object is present twice and passes equals test then each object will be processed twice. 

- Remember that for the get and the remove methods, the index must be between 0 and the list's size minus 1 (both inclusive) otherwise an IndexOutOfBoundsException is thrown but in the case of the add method, the highest index value is the same as the list's size, which implies that you are adding an element after the last element, i.e., at the end of the list. 

Methods that help you inspect a list:

- boolean isEmpty(): Returns true if the list has no elements.

- boolean contains(Object o): Returns true of the list contains the given object.

- boolean containsAll(Collection c): Returns true of the list contains all of the elements present in the given collection.

- List subList(int fromIndex, int toIndex): Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. If fromIndex and toIndex are equal, the returned list is empty. If formIndex and toIndex are out of range then IndexOutOfBoundExecption is thrown. If fromIndex > toIndex IllegalArgumentException is thrown.

- int indexOf(Object o): Returns the index at which the given object is found in the list. Returns -1 if it is not found.

- int lastIndexOf(Object o): Returns the last index at which the given object is found in the list. Returns -1 if it is not found.

- Object[] toArray(): Returns a array of Objects containing all the elements of this list.

- <T> T[] toArray(T[] a): Returns an array of the type specified in the argument containing all the elements of this list. The objects of the list must be of the type passed in the argument. This method is helpful when you want to convert a list into an array of a specific type. For example, String[] strArray = listOfString.toArray(new String[0]); will return a String[] containing all the elements of the list.

- The subList(int fromIndex, int toIndex) method in the above list of methods is particularly interesting. It does not return a new independent list but just a view into the original list. Thus, any change you do to the view is reflected in the original list as shown the example below: 

- boolean remove(Object o) method of list return true if object was removed successfully or false otherwise.

- The overloaded 'of' methods are merely convenience methods that take 0 to 10 parameters and return an unmodifiable List. For example, if you want to create a list of 3 Strings, you could do List<String> list1 = List.of("a", "b", "c");

- copyOf method is a convenience method to create an unmodifiable list using the elements of an existing collection. For example, List<String> list2 = List.copyOf(list1);

- of and copyOf methods are
1. They are unmodifiable. Elements cannot be added, removed, or replaced. Calling any mutator method on the List will always cause UnsupportedOperationException to be thrown. However, if the contained elements are themselves mutable, this may cause the List's contents to appear to change.

2. They disallow null elements. Attempts to create them with null elements result in NullPointerException.

3. They are serializable if all elements are serializable. (Not important for the Part 1 exam)

4. The order of elements in the list is the same as the order of the provided arguments, or of the elements in the provided array.

5. They are value-based. Callers should make no assumptions about the identity of the returned instances. Factories are free to create new instances or reuse existing ones. Therefore, identity-sensitive operations on these instances (reference equality (==), identity hash code, and synchronization) are unreliable and should be avoided.

ArrayList
----------
- ArrayList Constructors
ArrayList(): Constructs an empty list with an initial capacity of 10. 
ArrayList(Collection c): Constructs a list containing the elements of the specified collection. 
ArrayList(int initialCapacity): Constructs an empty list with the specified initial capacity.

- ensureCapacity(int n) .Calling this method with an appropriate number before inserting a large number of elements in the ArrayList improves performance of the add operation by reducing the need for incremental reallocation of the internal array.

- trimToSize() method, which gets rid of all the unused space by reducing its capacity to the match the number of elements in the list.

- String toString(): Well, toString is not really the most important method of ArrayList but since we will be depending on its output in our examples, it is better to know about it anyway. ArrayList's toString first gets a string representation for each of its elements (by invoking toString on them) and then combines into a single string that starts with [ and ends with ].

- boolean add(E e): Appends the specified element to the end of this list. As discussed in the Generics section, E is just a place holder for whichever type you specify while creating the ArrayList. This method is actually declared in Collection interface and the return value is used to convey whether the collection was changed as a result of calling this method. In case of an ArrayList, the add method always adds the given element to the list (even if the element is null), which means it changes the collection every time it is invoked. Therefore, it always returns true. 

- void add(int index, E element): Inserts the specified element at the specified position in this list. The indexing starts from 0 and the maximum value of index can be size. Therefore, if you call add(0, "hello") on an list of Strings, "hello" will be inserted at the first position. If index is greater than size of list, then IndexOutOfBoundException is thrown.

- boolean addAll(Collection<? extends E> c): Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator. 

- boolean addAll(int index, Collection<? extends E> c): This method is similar to the one above except that it inserts the elements of the passed list in the specified collection into this list, starting at the specified position.

- E remove(int index): Removes the element at the specified position in this list. If you pass an invalid int value as an argument (such as a negative value or a value that is beyond the range of the list, i.e., size-1), an IndexOutOfBoundsException will be thrown.

- boolean remove(Object o): Removes the first occurrence of the specified element from this list, if it is present. This method returns true if an element was actually removed from the list as a result of this call. In other words, if there is no element in the list that matches the argument, the method will return false.

- Removes from this list all of its elements that are contained in the specified collection. Unlike the remove(Object obj) method, which removes only the first occurrence of an element, removeAll removes all occurrences of an element.

- void clear(): Removes all of the elements from this list. 

- E set(int index, E element): Replaces the element at the specified position in this list with the specified element. It returns the element that was replaced. 

- boolean contains(Object o): The object passed in the argument is compared with each element in the list using the equals method. A true is returned as soon as a matches is found, a false is returned otherwise. 

- E get(int index): Returns the element at the specified position in this list. It throws an IndexOutOfBoundsException if an invalid value (i.e. a value less than 0 or greater than size-1) is passed as an argument.

- int indexOf(Object o): The object passed in the argument is compared with each element in the list using the equals method. The index of the first element that matches is returned. If this list does not contain a matching element, -1 is returned.

- boolean isEmpty(): Returns true if this list contains no elements.

- int size(): Returns the number of elements in this list. Recall that to get the number of elements in a simple array, you use the variable named length of that array.

- Here are a few points that you should remember for the exam:

1. Adding nulls: ArrayList supports null elements.
2. Adding duplicates: ArrayList supports duplicate elements.
3. Exceptions: None of the ArrayList methods except toArray(T[] a) throw NullPointerException. They throw IndexOutOfBoundsException if you try to access an element beyond the range of the list.
4. Method chaining: Unlike StringBuilder, none of the ArrayList methods return a reference to the same ArrayList object. Therefore, it is not possible to chain method calls.

- Size vs Capacity
Size is the number of elements that are currently stored in the ArrayList. While capacity is the length of the internal array that an ArrayList uses to store its elements.
